#!/usr/bin/cl --quicklisp --restart huffman:test --load huffman.lisp

(in-package :huffman)

(defparameter example
  (concatenate
   'string
   "aaaaa"
   "bbbbbbbbb"
   "cccccccccccc"
   "ddddddddddddd"
   "eeeeeeeeeeeeeeee"
   "fffffffffffffffffffffffffffffffffffffffffffff"))

(defun test ()
  (let* ((data example)
         (encoder (data->encoder data))
         (tree (encoder-tree encoder))
         (header (header->bits tree))
         (bits (data->bits data (encoder-mapping encoder)))
         (eob (end-of-block->bits (encoder-mapping encoder)))
         (byte-list (bits->byte-list (append header bits eob)))
         (bytes (byte-list->bytes byte-list)))
    (format *standard-output* "~&Tree:")
    (pprint tree)
    (format 't "~&~%")
    (format 't "~&Mapping:")
    (loop for k being the hash-keys in (encoder-mapping encoder) using (hash-value v)
       do (format 't "~&~t~a: ~a" k v))
    (format 't "~&~%")
    (print-encoder-data encoder)
    (format 't "~&~%Header:")
    (pprint header)
    (format 't "~&~%Data:")
    (pprint bits)
    (format 't "~&~%End of Block:")
    (pprint eob)
    (format 't "~&~%Byte List:")
    (pprint byte-list)
    (format 't "~&~%Bytes:")
    (pprint bytes)
    (format 't "~&")))
